package store.Model;import java.io.*;import java.time.LocalDate;import java.util.*;public class Products {    private List<Product> products;    private Promotions promotions;    public Products(Promotions promotions) {        products = new ArrayList<>();        this.promotions = promotions;    }    public void readProductsFromFile(String filePath) {        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {            String line = br.readLine();            while ((line = br.readLine()) != null) {                if (!line.trim().isEmpty()) {                    String[] parts = line.split(",");                    String name = parts[0].trim();                    int price = Integer.parseInt(parts[1].trim());                    int quantity = Integer.parseInt(parts[2].trim());                    Optional<Promotion> promotion = Optional.ofNullable(promotions.findPromotionByName(parts[3].trim()));                    Optional<Product> existingProductOpt = findProductByName(name);                    if (existingProductOpt.isPresent()) {                        // 이미 존재하는 상품이 있을 때, 프로모션 여부에 맞춰 수량 추가                        Product existingProduct = existingProductOpt.get();                        if (promotion.isPresent()) {                            existingProduct.increasePromotionQuantity(quantity);                        } else {                            existingProduct.increaseRegularQuantity(quantity);                        }                    } else {                        Product product = new Product(name, price, quantity, promotion.orElse(null));                        products.add(product);                    }                }            }        } catch (IOException e) {            System.err.println("Error reading file: " + e.getMessage());        }    }    public Optional<Product> findProductByName(String productName) {        return products.stream()                .filter(p -> p.getName().equals(productName))                .findFirst();    }    public boolean processOrder(List<OrderItem> order) {        for (OrderItem orderItem : order) {            Optional<Product> productOpt = findProductByName(orderItem.getProductName());            if (productOpt.isEmpty()) {                System.out.println("상품 " + orderItem.getProductName() + "을(를) 찾을 수 없습니다.");                return false;            }            Product product = productOpt.get();            int requiredQuantity = orderItem.getQuantity();            int promotionQuantity = product.getPromotionQuantity();            int regularQuantity = product.getRegularQuantity();            if (product.getPromotion().isPresent()) {                Promotion promotion = product.getPromotion().get();                if (promotionQuantity >= requiredQuantity) {                    product.decreasePromotionQuantity(requiredQuantity);                } else {                    // 추후 처리                }            } else {                product.decreaseRegularQuantity(regularQuantity);            }        }        return true;    }    public List<Product> getProducts() {        return products;    }}